version: '3.7'

services:
  web:
    user: "${UID_ENV}:${GID_ENV}"
    build:
      context: ./services/web
      dockerfile: Dockerfile
      args:
        - BLAST_VERSION=${BLAST_VERSION}
        - DOCKER_UID=${UID_ENV}
        - DOCKER_GID=${GID_ENV}
    command: gunicorn --bind 0.0.0.0:${FLASK_PORT_ENV} manage:app --timeout 300
    volumes:
      - static_volume:/home/app/web/project/static
      - media_volume:/home/app/web/project/media
      - ${PAVIAN_IN_H}:/pavian/in:ro
      - ${PAVIAN_OUT_H}:/pavian/out
      - ${TAXA_SQLITE_H}:/pavian/taxa.sqlite
      - ${TAXA_SQLITE_PKL_H}:/pavian/taxa.sqlite.traverse.pkl
      - ${BLASTDB_NT_H}:/blast_db/nt
      - ${BLASTDB_REFSEQ_H}:/blast_db/refseq
      - ${CODE_VOLUME}/services/web:/home/app/web
    expose:
      - ${FLASK_PORT_ENV}
    ports:
      - ${DEBUG_WEB}:${DEBUG_WEB}
    environment:
      - FLASK_APP=project/__init__.py
      - BLASTDB_NT=/blast_db/nt/nt_v5
      - BLASTDB_REFSEQ=/blast_db/refseq/
      - PAVIAN_IN=/pavian/in
      - PAVIAN_OUT=/pavian/out
      - TAXA_SQLITE=/pavian/taxa.sqlite
      - TAXA_SQLITE_PKL=/pavian/taxa.sqlite.traverse.pkl
      - SQL_HOST=${SQL_HOST_ENV}
      - SQL_PORT=${SQL_PORT_ENV}
      - HOST_DOMAIN=${HOST_DOMAIN_ENV}
      - JBROWSE_PORT=${JBROWSE_PORT_ENV}
      - FLASK_PORT=${FLASK_PORT_ENV}
      - DATABASE_URL=postgresql://${POSTGRES_USER_ENV}:${POSTGRES_PASSWORD_ENV}@${SQL_HOST_ENV}:${SQL_PORT_ENV}/${POSTGRES_DB_ENV}
      - DOCKER_UID=${UID_ENV}
      - DOCKER_GID=${GID_ENV}
    # Depends on db, because tables Classes are created in __init__.py
    depends_on:
      - db
  db:
#    user: "${UID_ENV}:${GID_ENV}"
    #    build:
    #      context: ./services/db
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER_ENV}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_ENV}
      - POSTGRES_DB=${POSTGRES_DB_ENV}
      - DOCKER_UID=${UID_ENV}
      - DOCKER_GID=${GID_ENV}
  nginx:
    #    user: "${UID_ENV}:${GID_ENV}"
    build:
      context: ./services/nginx
      args:
        - POSTGRES_USER_ENV=${POSTGRES_USER_ENV}
        - FLASK_PORT_ENV=${FLASK_PORT_ENV}
        - DOCKER_UID=${UID_ENV}
        - DOCKER_GID=${GID_ENV}
    volumes:
      - static_volume:/home/app/web/project/static
      - media_volume:/home/app/web/project/media
    ports:
      - ${NGINX_PORT_ENV}:80
    depends_on:
      - web
    environment:
      - DOCKER_UID=${UID_ENV}
      - DOCKER_GID=${GID_ENV}
  jbrowse:
#    user: "${UID_ENV}:${GID_ENV}"
    build:
      context: ./services/jbrowse
      args:
        - JBROWSE_PORT=${JBROWSE_PORT_ENV}
        - DOCKER_UID=${UID_ENV}
        - DOCKER_GID=${GID_ENV}
    volumes:
      - ${PAVIAN_OUT_H}:/jbrowse/data/pavianfiles
    ports:
      - ${JBROWSE_PORT_ENV}:${JBROWSE_PORT_ENV}
    environment:
      - DOCKER_UID=${UID_ENV}
      - DOCKER_GID=${GID_ENV}
  pavian:
    user: "${UID_ENV}:${GID_ENV}"
    build:
      context: ./services/pavian
      args:
        - BRANCH=${PAVIAN_BRANCH_ENV}
        - PAVIAN_PORT=${PAVIAN_PORT_ENV}
        - DOCKER_UID=${UID_ENV}
        - DOCKER_GID=${GID_ENV}
    volumes:
      - ${PAVIAN_CODE_DIR}:/pavian/code:ro
      - ${PAVIAN_IN_H}:/pavian/in:ro
    ports:
      - ${PAVIAN_PORT_ENV}:${PAVIAN_PORT_ENV}
#    secrets:
#      - db-user
#      - db-pass
    environment:
      - PAVIAN_IN=/pavian/in
      - SQL_HOST=${SQL_HOST_ENV}
      - HOST_DOMAIN=${HOST_DOMAIN_ENV}
      - PAVIAN_PORT=${PAVIAN_PORT_ENV}
      - HOST_IP=${HOST_IP_ENV}
      - NGINX_PORT=${NGINX_PORT_ENV}
      - POSTGRES_USER=${POSTGRES_USER_ENV}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_ENV}
      - POSTGRES_DB=${POSTGRES_DB_ENV}
      - DOCKER_UID=${UID_ENV}
      - DOCKER_GID=${GID_ENV}
#      - POSTGRES_USER={{DOCKER-SECRET:db-user}}
#      - POSTGRES_PASSWORD={{DOCKER-SECRET:db-pass}}

#secrets:
#  db-user:
#    external: true
#  db-pass:
#    external: true

volumes:
  postgres_data:
  static_volume:
  media_volume:
